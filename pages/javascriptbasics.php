<h2 class="pt-4 fs-4 text-center">
JavaScript: Основи
</h2>
	

    <p class="pt-4 fs-6">   
        Добре дошли в света на JavaScript, където ще научите основните концепции, които съставят основата на уеб разработката. Нека се запознаем с основите, започинайки от променливите:
    </p>

    <img src="./assets/images/jsbasic.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">   
        Променливите са като контейнери за данни, те съдържат информация, която вашите програми могат да използват. Можете да декларирате променливи с помощта на "var", "let" или "const". Те са като кутии с етикети, в които можете да поставяте неща. В съвременния JavaScript, добрите практики обикновено насочват към използване на "let" за променливи, които могат да се променят и "const" за константи, които не трябва да се променят. Това помага за подобряване на предсказуемостта на кода и предотвратява случайни промени. "Var" е рядко срещано вече в съвременен JavaScript, и е най-добре да се стремим да не го използваме много.
    </p>

    <p class="pt-4 fs-6">   
        Булевите стойности са начин да видим дали нещо е вярно или не. Те са като превключватели, които могат да бъдат "включени" (true) или "изключени" (false). Те могат да се използват като конструиране на условни оператори, същото като "врати" в електротехниката, да бъдат нужни дадени изисквания преди ние да използваме дадени функции.
    </p>

    <img src="./assets/images/jsbasic1.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">   
        Истински стойности се считат за true  включват непразни низове, числа различни от 0, обекти, функции и други. Стойности които имат някаква тежест или са дефинирани се считат за верни.
        Лъжливи стойности се считат за false  включват 0, NaN, празни низове, null, undefined и false. При празни или недефинирани стойности се считат за лъжливи.    
    </p>

    <p class="pt-4 fs-6">   
        Операторите са в основата на всяка функия или логика която вкарваме в нашия код. Те ви помагат да извършвате операции като математика, сравнения и логически операции.
    </p>

    <img src="./assets/images/jsbasic2.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">
    Броят на операторите е голям, и ако искаме да влизаме в детайл за всеки един ще сме тука доста време, затова тука има <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators">линк</a> да ви помогне да видите всички оператори и примери към тях.       
    
    </p>

    <p class="pt-4 fs-6">   
        Условни оператори и Низове: <br>
        Низовете са текст, коитоза пример може да бъде вашето име, съобщение или какъвто друг текст искаме. Могат да бъдат затворени в единични('') или двойни кавички(""). Условните оператори са начин ние да парвим няколко логически изисквания наведнъж. Те ви позволяват да правите решения и да следвате различни пътища или условия във вашия код.
    </p>

    <img src="./assets/images/jsbasic3.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
    В този пример програмата проверява стойността на променливата dayOfWeek и използва операторите "if", "else if" и "else", за да изведе съобщение в конзолата в зависимост от деня. В зависимост от стойността на dayOfWeek, ще видите различни съобщения в конзолата.
    </p>

    <p class="pt-4 fs-6">   
        Цикли (Повторения): Повтарящо се действие или изискване във вашия код, докато не е изпълнено неговото условие. <br> <br>
        Обекти: Начин да групиране много променливи под едно обшо "дърво". Таке те ще бъдат от едно семейство и само ще трябва да ги създавме а не всеки път да ги инициализраме и дефинираме с няколко реда код. <br> <br>
        Масиви: Подредени списъци със стойности за съхранение и обработка на данни. <br> <br>
    </p>

    <img src="./assets/images/jsbasic4.png" style="max-width: 950px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
        В горния пример можем да видим че се създава масив с име visitors, който съдържа обекти, представящи посетители на клуб(студенти). Всеки обект    има name (име) и nickname (прякор).
        Създава се обект с име club, който има свойства като name (име), location (място) и visitors (посетители). Свойството visitors се присвоява стойността на масива visitors. Така можем да изпишем гостите в глуба, много готино според мен.
    </p>

    <p class="pt-4 fs-6">   
    Обхватът е като видимостта на вашите променливи. Някои променливи могат да бъдат видими само в определени части от вашия код, най-често функията в която са направени, с изключение на старшния "var", които може да види и над функията в която се намира.   Асинхронен както знаем знаечи изпълнение без чакане. JavaScript използва обратни извиквания (callbacks), обещания (promises) и async/await за обработка на задачи, които отнемат време.
    </p>

    <img src="./assets/images/jsbasic5.png" style="max-width: 950px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
        Този пример илюстрира как JavaScript можем да ползваме ивизквания и да обещаем променливите да бъдат изписани. Първо конзолата веднага ще ни даде текста "аз съм функция"  и след това ще се спре за 2000 стотни преди да изпише "аз съм извикване" поселдвана веднага от "аз съм функция".
    </p>


<p class="mt-5 fs-6">   
Основите в JavaScript са важно нещо както във всеки друг език. Ако имате опит с други различни езици, бързо ще можете да схванете и разберете тънкостите и разликите на JavaScript.
</p>	

