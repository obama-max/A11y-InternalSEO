<h2 class="pt-4 fs-4 text-center">
JavaScript: Основи
</h2>
	

    <p class="pt-4 fs-6">   
        Добре дошли в света на JavaScript, където ще научите основните концепции, които съставят основата на уеб разработката. Нека се запознаем с основите, започинайки от променливите:
    </p>

    <img src="./assets/images/jsbasic.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">   
        Променливите са като контейнери за данни. Те съдържат информация, която вашите програми могат да използват. Можете да декларирате променливи с помощта на "var", "let" или "const". Те са като кутии с етикети, в които можете да поставяте неща. В съвременния JavaScript, добрите практики обикновено насочват към използване на "let" за променливи, които могат да се променят и "const" за константи или променливи, които не трябва да се променят. Това помага за подобряване на предсказуемостта на кода и предотвратява случайни промени. Все пак, изборът зависи от конкретните изисквания на вашето проект и от стандартите за програмиране на вашия екип.
    </p>

    <p class="pt-4 fs-6">   
        Булевите стойности са семпли. Те са като превключватели, които могат да бъдат "включени" (true) или "изключени" (false). Използват се за вземане на решения в кода ви.
    </p>

    <img src="./assets/images/jsbasic1.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">   
        Истински стойности се считат за true в условия и включват непразни низове, числа различни от 0, обекти, функции и други.
        Лъжливи стойности се считат за false в условия и включват 0, NaN, празни низове, null, undefined и false.    
    </p>

    <p class="pt-4 fs-6">   
        Операторите са като инструменти в вашата програмистка кутия. Те ви помагат да извършвате операции като математика, сравнения и логически операции.
    </p>

    <img src="./assets/images/jsbasic2.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">
    Броят на операторите е голям, и ако искаме да влизаме в детайл за всеки един ще сме тука доста време, затова тука има <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators">линк</a> да ви помогне да видите всички оператори и примери към тях.       
    
    </p>

    <p class="pt-4 fs-6">   
        Условни оператори и Низове: <br>
        Низовете са текст. Те могат да бъдат вашето име, съобщение или каквото и да е. Могат да бъдат затворени в единични или двойни кавички. Условните оператори са като разклонения в пътя. Те ви позволяват да правите решения и да следвате различни пътища във вашия код.
    </p>

    <img src="./assets/images/jsbasic3.png" style="max-width: 750px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
    В този пример програмата проверява стойността на променливата dayOfWeek и използва операторите "if", "else if" и "else", за да изведе съобщение в конзолата в зависимост от деня. В зависимост от стойността на dayOfWeek, ще видите различни съобщения в конзолата.
    </p>

    <p class="pt-4 fs-6">   
        Цикли (Повторения): Контролни структури, които повтарят блок от код. <br>
        Обекти: Структури за данни с ключ-стойност за организация на данни и поведение. <br>
        Масиви: Подредени списъци със стойности за съхранение и обработка на данни. <br>
    </p>

    <img src="./assets/images/jsbasic4.png" style="max-width: 950px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
        В горния пример можем да видим че се създава масив с име visitors, който съдържа обекти, представящи посетители на клуб. Всеки обект    има name (име) и nickname (прякор).
        Създава се обект с име club, който представлява клуб. Той има свойства като name (име), location (място) и visitors (посетители).       Свойството visitors се присвоява стойността на масива visitors.
        Използват се console.log инструкции, за да се изведе информация за клуба и неговите посетители. Много готино според мен.
    </p>

    <p class="pt-4 fs-6">   
    Обхватът е като видимостта на вашите променливи. Някои променливи могат да бъдат видими само в определени части от вашия код.   Асинхронен означава изпълнение без чакане. JavaScript използва обратни извиквания (callbacks), обещания (promises) и async/await за обработка на задачи, които отнемат време.
    </p>

    <img src="./assets/images/jsbasic5.png" style="max-width: 950px; margin: auto" alt="#"> 

    <p class="pt-4 fs-6">       
        Този пример илюстрира как JavaScript обработва обхвата на променливите, като функционалнаОбхватПроменлива е достъпна в цялата функция, а обхватНаБлокаПроменлива е ограничена само до обхвата на блока на обратния извикател.
    </p>


<p class="mt-5 fs-6">   
JavaScript е гъвкав програмен език, от съществено значение за съвременната уеб разработка. В този обобщителен преглед сме обхванали ключови концепции като променливи, типове данни, оператори, условни оператори, цикли, функции, масиви, обекти, обхват и асинхронно програмиране. Тези основи образуват сърцето на JavaScript и са от съществено значение за разработка на уеб сайтове и приложения. Екосистемата на JavaScript постоянно се разширява, а честите актуализации го правят важен инструмент за създаване на уеб страницы, уеб приложения и много други.
</p>	

