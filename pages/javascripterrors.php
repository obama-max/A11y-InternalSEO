<h2 class="pt-4 fs-4 text-center">
JavaScript грешки
</h2>
	

    <p class="pt-4 fs-6">   
        Разпознаването и правенето на грешки е важна част от разработката на даден уебсайт, затова нека си помогнем и видим какви са най-често правениете грешки или гафове срещани като поченем да работим с JavaScript. Главно, те се разпределят на два вида, синтактични и логически, затова няма да говорим в детайл за тях вместо това ще се фокусираме на по-специфични моменти: 
    </p>

    <p class="codepen" data-height="300" data-theme-id="dark" data-default-tab="js,result" data-slug-hash="jOXaRZv" data-editable="true" data-user="obama-max" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/obama-max/pen/jOXaRZv">
  грешки</a> by Darius Popov (<a href="https://codepen.io/obama-max">@obama-max</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>

<div class="col-12 row my-3">
    <ul class="col-12">
        <li class="pt-4 fs-6 col-12">   
            Грешки при изпълнение (Runtime Errors):

            Тези грешки се случват по време на изпълнение на програмата и са обикновено свързани с неправилни данни или     операции.
            Пример: Деление на нула, опит за достъп до несъществуващ елемент на масив, неопределени променливи и т.н.        
        </li>

        <li class="pt-4 fs-6 col-12">   
            Грешки при работа с DOM (DOM Errors):

            Този вид грешки се появяват, когато се опитваме да използваме или манипулираме DOM елементи, които не съществуват   или   не са готови за манипулация.
            Пример: Опит за достъп до несъществуващ елемент, опит за манипулация на DOM преди завършването на зареждането на        страницата.
        </li>

        <li class="pt-4 fs-6 col-12">   
            Семантични грешки (Semantic Errors):

            Тези грешки не са технически грешки, но възникват, когато програмата не възпроизвежда желаната функционалност поради            неправилно разбиране на изискванията или недоразумение във входните данни.
            Пример: Програма, която прави неочаквани действия поради лошо определени изисквания.        
        </li>

        <li class="pt-4 fs-6 col-12">   
            JavaScript има три основни обхвата: глобален, локален и обхват на блока.

            Глобален обхват (Global Scope) включва всички променливи, дефинирани извън функции, което им дава способноста да са видими в целия код.

            Локален обхват (Local или Function Scope) се създава в рамките на функции и включва променливите, дефинирани в тях. Тоест могат да се видят вътре в себе си само, или в други функции под тях.

            Обхват на блока (Block Scope) се създава в блокове като if, for и други. Променливите, дефинирани в тези блокове,   са видими  само в рамките на този блок.
        </li>

        <li class="pt-4 fs-6 col-12">   
            Друга срещана грешка е опита да се използва "const" или "let" без да се знае разликата межу тях. "let" можем да ползваме за всичко, няма проблем реално да пишем цел код само с него, но има моменти в кода ни където имаме променливи като числа или именна които не се променят и трябва да седят еднакви, тогава използваме "const". При опит да се приосвой нова променлива на "const" ще ни изпише грешка в конозолата.
        </li>
    </ul>
</div>

<p class="mt-5 fs-6">   
Честите грешки в JavaScript могат да се откриват и отстраняват с помощта на вградената JavaScript конзола, в Chrome dev tools. Стига да може да се намери грешката в конзолата, 9/10 пъти ще можем просто да го поставим в гугъл и получим нашият отговор. 
</p>	